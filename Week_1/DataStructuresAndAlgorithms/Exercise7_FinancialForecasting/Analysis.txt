Time Complexity of the Recursive Algorithm:

The time complexity of the recursive forecasting function is O(n), where n is the number of years.
This is because the function calls itself once per year, subtracting 1 from the value of years each time until it reaches 0 (base case).
So it's 5 times to do 5 years, 10 times to do 10 years — that's linear time, or O(n).



Enhancement to Minimize Inefficient Computations

In some recursive procedures, like the computation of Fibonacci numbers, the computer keeps repeating the same thing over and over again ,i.e., it repeatedly solves the same subproblem. This results in wasteful use of time and, as a result, performance gets decreased.

In order to resolve this issue, we implement a technique known as MEMOIZATION , where the results of the computation are saved so they won't be computed repeatedly.

In our calculation (in the future value calculation, in particular), every step is computed once, from the previous year's value alone. Therefore, there is no redundant calculation, and memoization is not needed.

But if we need to make our program even quicker and consume less memory — particularly in real-time systems — we can code it in an easy loop instead of recursion. A loop does the same thing; however, it is more cost-effective because it does not involve putting extra function calls in memory.