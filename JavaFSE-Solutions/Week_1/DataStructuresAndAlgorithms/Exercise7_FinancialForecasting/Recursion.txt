WHAT IS RECURSION ?

Recursion is when a method (or function) calls itself to solve a smaller version of the same problem.
It keeps breaking the problem into smaller and smaller parts until it reaches a simple case that can be solved directly.
This simple case is called the BASE case, and it stops the recursion from continuing forever.


WHY DO WE NEED IT ?

We use recursion when a problem can be divided into similar smaller sub-problems.
Instead of repeating the same logic again and again, recursion allows us to solve one small part and let the method handle the rest by calling itself.



EXAMPLE 1: Calculate future value

Imagine you want to know how much money you’ll have after 5 years if it grows by 10% every year.

Let's say, we want to calculate the total amount of money in 5 years:
 the amount in year 5 is the same as year 4, but increased by 10%.
And year 4 depends on year 3, which depends on year 2… and so on.

Eventually, we reach year 0 — and we already know that value (the initial amount). That’s the BASE case.




EXAMPLE 2: Fibonacci Series

How it works:
The 0th number is 0
The 1st number is 1
From the 2nd number onward: Each number = previous number + the one before that

So:
2nd = 1st + 0th → 1 + 0 = 1
3rd = 2nd + 1st → 1 + 1 = 2
4th = 3rd + 2nd → 2 + 1 = 3
5th = 4th + 3rd → 3 + 2 = 5
...

Let’s say we want to find the 5th Fibonacci number.
We can say:
Fibonacci(5) = Fibonacci(4) + Fibonacci(3)

And those two also break down further:
Fibonacci(4) = Fibonacci(3) + Fibonacci(2)
Fibonacci(3) = Fibonacci(2) + Fibonacci(1)
...

Eventually, we reach Fibonacci(0) and Fibonacci(1), which are known as the base cases.
